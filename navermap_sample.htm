<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=11"> >
    <meta http-equiv="Content-Type" content="text/html">
    <title>Naver map</title>
    <style> 
     #wrap .buttons { position:absolute;top:0;left:0;z-index:1000;padding:5px; } 
     #wrap .buttons .control-btn { margin:0 5px 5px 0; } 
    .map_wrap {position:relative;width:100%;height:100%;}
    .title {font-weight:bold;display:block;}
	.dot {overflow:hidden;float:left;width:12px;height:12px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/mini_circle.png');}   
	.dotOverlay {position:relative;left:-37%;bottom:5px;border-radius:6px;border: 1px solid #ccc;border-bottom:2px solid #ddd;float:left;font-size:12px;padding:5px;background:#fff;}
	.dotOverlay2 {position:relative;bottom:1px;border-radius:6px;border: 0px solid #ccc;border-bottom:2px solid #ddd;float:left;font-size:12px;padding:5px;background:#fff;}
	.dotOverlay:nth-of-type(n) {border:0; box-shadow:0px 1px 2px #888;}    
	.number {font-weight:bold;color:#ee6152;}
	.dotOverlay:after {content:'';position:absolute;margin-left:-6px;left:50%;bottom:-8px;width:11px;height:8px;background:url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white_small.png')}
	.distanceInfo {position:relative;top:5px;left:5px;list-style:none;margin:0;}
	.distanceInfo .label {display:inline-block;width:50px;}
	.distanceInfo:after {content:none;}
  .radius_border{border:1px solid #919191;border-radius:5px;}     
	.bAddr {padding:5px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;} 
.custom_typecontrol {position:absolute;top:10px;right:10px;overflow:hidden;width:195px;height:30px;margin:0;padding:0;z-index:1;font-size:12px;font-family:'Malgun Gothic', '���� ���?' , sans-serif;}
.custom_typecontrol span {display:block;width:65px;height:30px;float:left;text-align:center;line-height:30px;cursor:pointer;}
.custom_typecontrol .btn {background:#fff;background:linear-gradient(#fff,  #e6e6e6);}       
.custom_typecontrol .btn:hover {background:#f5f5f5;background:linear-gradient(#f5f5f5,#e3e3e3);}
.custom_typecontrol .btn:active {background:#e6e6e6;background:linear-gradient(#e6e6e6, #fff);}    
.custom_typecontrol .selected_btn {color:#fff;background:#425470;background:linear-gradient(#425470, #5b6d8a);}
.custom_typecontrol .selected_btn:hover {color:#fff;}   
.custom_zoomcontrol {position:absolute;top:50px;right:10px;width:36px;height:80px;overflow:hidden;z-index:1;background-color:#f5f5f5;} 
.custom_zoomcontrol span {display:block;width:36px;height:40px;text-align:center;cursor:pointer;}     
.custom_zoomcontrol span img {width:15px;height:15px;padding:12px 0;border:none;}    
.custom_zoomcontrol span:first-child{border-bottom:1px solid #bfbfbf;}     
</style>
<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=[NCP_ID]&amp;submodules=geocoder"></script>
</head>
<body>
<div class="map_wrap">
    <div id="map" style="width:100%;height:100%;position:relative;"></div>
<div class="custom_typecontrol radius_border">
        <span id="btnSurvyeDist" class="btn" onclick="setMapType('surveydistmode')">Ž��Ÿ�</span>
        <span id="btnDistance" class="btn" onclick="setMapType('distancemode')">�Ÿ�</span>
        <span id="btnOff" class="selected_btn" onclick="setMapType('offmode')">OFF</span>
    </div>    
    <div class="hAddr">
        <span id="centerAddr"></span>
    </div> 
</div>
<style type="text/css">
    html { height: 100% }
    body { height: 100%; margin: 0; padding: 0 }
    #map { width: 100%; height: 100% }
    </style>
<script type="text/javascript">
		var linePath = [
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000),
			new naver.maps.LatLng(0.000000, 0.000000)
		];
        var position = new naver.maps.LatLng(0.000000, 0.000000);
        var map = new naver.maps.Map(document.getElementById('map'), {
           center: position,
           level: 11,
           mapTypeId: naver.maps.MapTypeId.NORMAL,
           mapTypeControl: true,
           mapTypeControlOptions:{
           position:naver.maps.Position.TOP_LEFT
           }
       });
       var drawingFlag = false;  
       var moveLine;  
       var clickLine;  
       var distInfoWnd;
       var dots = [];  
       var mapmode = 0;
       var marker = new naver.maps.Marker(), 
           infowindow = new naver.maps.InfoWindow({zindex:1});  
      map.addListener('click', function(e) {
           var clickPosition = e.coord;
           if(mapmode == 2){ //Distance mode
           if (!clickLine) {
               moveLine = new naver.maps.Polyline({ 
                       map: map,
                       path: [clickPosition],     
                       strokeWeight: 3, 
                       strokeColor: '#db4040', 
                       strokeOpacity: 0.5, 
                       strokeStyle: 'solid'  
                   });
               clickLine = new naver.maps.Polyline({
                   map: map,
                   path: [clickPosition], 
                   strokeWeight: 3,  
                   strokeColor: '#db4040', 
                   strokeOpacity: 1, 
                   strokeStyle: 'solid' 
               });
                   displayCircleDot(clickPosition, 0);

               } else { 
               if(moveLine){ 
						moveLine.setPath([e.coord]);
						clickLine.getPath().push(clickPosition);
						var distance =Math.round(clickLine.getDistance());
						displayCircleDot(clickPosition, distance);
						}
					}
               }
               else if(mapmode == 1){ // surveydist mode
               }
               else { // Off mode = GPS lat/lng mode
               }
           });
      map.addListener( 'mousemove', function (e) {
           if (clickLine){
				if (moveLine){
               var path = moveLine.getPath();
               var distance = Math.round(clickLine.getDistance() + moveLine.getDistance());
               var  content = '<div class="dotOverlay2 distanceInfo">�Ÿ�:<span class="number">' + distance + '</span>m</div>';
               if(path.getLength()===2){    
               path.pop();
               }
               path.push(e.coord);
               }
           } 
       });

       map.addListener( 'idle', function() {
       });
       map.addListener('rightclick', function (mouseEvent) { 
           if (clickLine) {
               moveLine.setMap(null);
               moveLine = null;  
               var path = clickLine.getPath();
               if (path.length > 1) {
                   if (dots[dots.length-1].distance) {
                   }
               } else {
                   deleteInfoWindow();
                   deleteClickLine();
                   deleteCircleDot(); 
                   deleteDistnce();
               }
           }  
               drawingFlag = false;     
       });  

       function displayCircleDot(position, distance) {
              var circleDotPosition = position;
              var circleDotMarkerOption = {
              				position: circleDotPosition,
              				map : map, 
              				icon : {
              				url: 'http://i1.daumcdn.net/localimg/localimages/07/mapapidoc/mini_circle.png',
              				size : new naver.maps.Size(20, 20), 
              				origin : new naver.maps.Point(0, 0), 
                              anchor : new naver.maps.Point(5, 5),
                              zindex: 2
                          }
              };
              var circleDotMarker = new naver.maps.Marker(circleDotMarkerOption);
              if (distance > 0) {
                      distInfoWnd = new naver.maps.InfoWindow({
                          content:'<div class="dotOverlay2">�Ÿ�:<span class="number">' + distance.toFixed(2) + '</span>m</div>'
                          });
                          distInfoWnd.open(map, circleDotMarker);
                  } 
                  dots.push({circle:circleDotMarker, distance:distInfoWnd});
             }; 

       function deleteClickLine() {
           if (clickLine) {
               clickLine.setMap(null);    
               clickLine = null;     
           }
           if (moveLine) {
               moveLine.setMap(null);    
               moveLine = null;     
           }
       };
       function deleteDistnce () {
           if (distInfoWnd) {
               distInfoWnd.setMap(null);
               distInfoWnd = null;
           }
       };
       function deleteCircleDot() {
           var i;
           for ( i = 0; i < dots.length; i++ ){ 
               if (dots[i].circle) { 
                   dots[i].circle.setMap(null); 
               } 
               if (dots[i].distance) { 
                   dots[i].distance.setMap(null); 
               } 
           } 
           dots = []; 
       } 
       function setMapType(modetype) { 
           var surveydistControl = document.getElementById('btnSurvyeDist'); 
           var distanceControl = document.getElementById('btnDistance'); 
           var offControl = document.getElementById('btnOff');
           if(modetype == 'distancemode'){
               mapmode = 2;
               distanceControl.className = 'selected_btn';
               offControl.className = 'btn';
               surveydistControl.className = 'btn';
				 if(totdistOverlay){
					totdistOverlay.setMap(null);
				 }
           } else if(modetype == 'surveydistmode'){
               mapmode = 1;
               surveydistControl.className = 'selected_btn';
               distanceControl.className = 'btn';
               offControl.className = 'btn';
				 if(totdistOverlay){
					totdistOverlay.setMap(map);
				 }
				deleteClickLine();
				deleteCircleDot(); 
           } else {
               mapmode = 0;
               distanceControl.className = 'btn';
               offControl.className = 'selected_btn';
               surveydistControl.className = 'btn';
               deleteallobjects();
           }
       }

       function deleteInfoWindow(){
           infowindow.close();
       }
       function deleteallobjects(){
           deleteInfoWindow();
           deleteClickLine();
           deleteCircleDot(); 
           deleteDistnce();
       }
        var startPosition = new naver.maps.LatLng(0.000000, 0.000000);
        var startmarkerOptions = {
        				position: startPosition,
        				map : map, 
        				icon : {
        				url: 'https://ssl.pstatic.net/static/maps/ux2013/icons/pins_fw_s.png',
        				size : new naver.maps.Size(24, 35), 
        				origin : new naver.maps.Point(0, 0), 
        				anchor : new naver.maps.Point(12, 35)
        			}
        }; 
        var startmarker = new naver.maps.Marker(startmarkerOptions);
        var arrivePosition = new naver.maps.LatLng(0.000000, 0.000000);
        var arrivemarkerOptions = {
        				position: arrivePosition,
        				map : map, 
        				icon : {
        				url: 'https://ssl.pstatic.net/static/maps/ux2013/icons/pins_fw_e.png',
        				size : new naver.maps.Size(24, 35), 
        				origin : new naver.maps.Point(0, 0), 
        				anchor : new naver.maps.Point(12, 35)
        			}
        }; 
        var arrivemarker = new naver.maps.Marker(arrivemarkerOptions);
        var markers = [];
        function addMarker(position) {
        	var marker = new naver.maps.Marker({
        		position: position
        	});
        	marker.setMap(map);
        	markers.push(marker);
        }
        for (var i = 0; i < markers.length; i++) {
        	markers[i].setMap(map);
        }            
        var poimarkers = [];
        var customOverlays = [];
        var circleOverlays = [];
        var poititle = [];
		  var poipaths = [];
		  poipaths[0]=linePath[0];
        function addPOIMarker(position, indx) {
		  poimarkers.push(position);
		  poipaths[1]=position;
		  var temppoipolyline = new naver.maps.Polyline({
		            map : map, 
		  			path: poipaths,
		  			strokeWeight: 5, 
		  			strokeColor: '#FF0000', 
		  			strokeOpacity: 0.0, 
		  			strokeStyle: 'solid' 
		  			});
		  var poidistance = Math.round(temppoipolyline.getDistance()); 
		  		var poicircleDotPosition = position;
		        var poicircleDotMarkerOption = {
		              				position: poicircleDotPosition,
		              				map : map, 
		              				icon : {
		              				url: 'http://i1.daumcdn.net/localimg/localimages/07/mapapidoc/mini_circle.png',
		              				size : new naver.maps.Size(20, 20), 
		              				origin : new naver.maps.Point(0, 0), 
		                              anchor : new naver.maps.Point(5, 5),
		                              zindex: 1000
		                          }
		              };
		        var poicircleDotMarker = new naver.maps.Marker(poicircleDotMarkerOption);
		var markerContent = ['<div class="dotOverlay">'+poititle[indx]+' at <span class="number">' + poidistance.toFixed(2) + '</span>m'+ 
							'</div>'].join('');
    	var htmlMarker = new naver.maps.Marker({
			position: position,
			map: map,
			icon: {
            content: markerContent,
            size: new naver.maps.Size(22, 30),
            anchor: new naver.maps.Point(11, 30)
        }
		  });
      };
		var polyline = new naver.maps.Polyline({
			path: linePath, 
			strokeWeight: 5, 
			strokeColor: '#FF0000', 
			strokeOpacity: 0.7,
			strokeStyle: 'solid' 
		});
		polyline.setMap(map);
		var totdistance = Math.round(polyline.getDistance()); 
		var totdistOverlay = new naver.maps.InfoWindow({
				position:arrivePosition,
				content:'<div class="dotOverlay2">Ž��Ÿ�:<span class="number">' + totdistance + '</span>m</div>',
				xAnchor: 0.5,
				yAnchor: 0,
				zIndex: 3
				});
</script>
</body>
</html>
